{"remainingRequest":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/rxjs/_esm5/operator/delayWhen.js","dependencies":[{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/rxjs/_esm5/operator/delayWhen.js","mtime":1523558820000},{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/cache-loader/dist/cjs.js","mtime":1524633755000},{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_delayWhen PURE_IMPORTS_END */\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n//# sourceMappingURL=delayWhen.js.map\n",null]}