{"remainingRequest":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/rxjs/_esm5/operator/retryWhen.js","dependencies":[{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/rxjs/_esm5/operator/retryWhen.js","mtime":1523558820000},{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/cache-loader/dist/cjs.js","mtime":1524633755000},{"path":"/Users/spencercheng/Desktop/SMU Blockchain Society/DAPPS/CryptoPoker/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_retryWhen PURE_IMPORTS_END */\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=retryWhen.js.map\n",null]}